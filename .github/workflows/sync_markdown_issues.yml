name: Sync Markdown to Issues

on:
  push:
    paths:
      - '**/*.md'  # 监听所有 Markdown 文件变化
    branches:
      - main  # 只在 main 分支触发

jobs:
  sync_issue:
    runs-on: ubuntu-latest

    steps:
      # 🚀 拉取完整代码历史
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 关键：拉取完整历史，避免 SHA 缺失问题

      # 🎯 安装 GitHub CLI
      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      # 🔍 检测 Markdown 文件内容变化
      - name: Get changed Markdown files (with content diff check)
        id: changed-files
        run: |
          # 获取当前 SHA
          current_sha=${{ github.sha }}
          before_sha=${{ github.event.before }}

          # 🎯 处理首次提交、新分支等特殊情况
          if [[ "$before_sha" == "0000000000000000000000000000000000000000" || -z "$before_sha" ]]; then
            # 如果 before_sha 为空，说明是新分支或首次提交，使用上一次提交比较
            before_sha=$(git rev-parse HEAD~1)
          fi

          # 🔥 检查所有内容有变化的 .md 文件
          changed_files=$(git diff --diff-filter=AM --name-only "$before_sha" "$current_sha" | grep '.md' || true)

          # 输出变更的文件
          echo "Detected changed files: $changed_files"
          echo "changed_files=${changed_files}" >> $GITHUB_ENV
        shell: bash

      # ⚡️ 创建或更新 Issue
      - name: Create or Update Issues for Markdown files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 如果没有变更的 Markdown 文件就退出
          if [[ -z "$changed_files" ]]; then
            echo "🎉 No markdown file content changed. Exiting."
            exit 0
          fi

          # 将文件列表转换为数组并处理转义字符
          while IFS= read -r file; do
            # 跳过空行
            [[ -z "$file" ]] && continue
            
            # 处理转义字符
            file_path=$(printf '%b' "$file")
            echo "Processing file: $file_path"

            # 检查文件是否存在
            if [[ ! -f "$file_path" ]]; then
              echo "❌ 文件不存在: $file_path"
              echo "原始文件路径: $file"
              continue
            fi

            # 提取文件名作为 Issue 标题
            title="$(basename "$file_path")"
            content=$(cat "$file_path")

            # 🕵️ 检查是否已有同名 Issue
            issue_number=$(gh issue list --label "auto-sync" --state all --search "$title" --json "number" | jq -r '.[0].number // ""')

            if [[ -n "$issue_number" ]]; then
              # ✏️ 如果 Issue 已存在，更新内容
              echo "🔄 Issue #$issue_number already exists. Updating..."
              gh issue edit "$issue_number" --body "$content"
              echo "✅ 已更新 Issue #$issue_number"
            else
              # ✨ 创建新的 Issue
              echo "🆕 Creating new issue: $title"
              gh issue create --title "$title" --body "$content" --label "auto-sync"
              echo "✨ 创建了新的 Issue: $title"
            fi
          done <<< "$changed_files"
        shell: bash
